import streamlit as st
import tiktoken
from loguru import logger
import pandas as pd
from langchain.chains import ConversationalRetrievalChain, RetrievalQA
from langchain.chat_models import ChatOllama
from langchain.document_loaders import PyPDFLoader, Docx2txtLoader, UnstructuredPowerPointLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.memory import ConversationBufferMemory, StreamlitChatMessageHistory
import torch
import gc
import time

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def clear_cache():
    torch.cuda.empty_cache()
    gc.collect()

def extract_text_from_csv(csv_path):
    df = pd.read_csv(csv_path)
    return ' '.join(df[column].astype(str).str.cat(sep=' ') for column in df.columns)

def split_text(text):
    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=400)
    return text_splitter.split_text(text)

def create_vector_store(chunks):
    embeddings = HuggingFaceEmbeddings(model_name='BAAI/bge-m3')
    return FAISS.from_texts(chunks, embeddings)

def setup_rag(csv_path):
    text = extract_text_from_csv(csv_path)
    chunks = split_text(text)
    vector_store = create_vector_store(chunks)
    
    llm = ChatOllama(model="llama3.1:8b", device=device)
    
    prompt_template = ChatPromptTemplate.from_template(
        "Context: {context}\n\n질문: {question}\n\n:\n\n답변:"
    )
    
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=vector_store.as_retriever(),
        chain_type_kwargs={"prompt": prompt_template}
    )
    
    return qa_chain, vector_store

def store_answer_in_vector_store(vector_store, question, answer):
    chunks = split_text(question + " " + answer)
    vector_store.add_texts(chunks)

def query_rag(qa_chain, vector_store, question):
    try:
        answer = qa_chain({"query": question})
        store_answer_in_vector_store(vector_store, question, answer['result'])
    except Exception as e:
        print(f"오류 발생: {e}")
        answer = {'result': ''}
    
    clear_cache()
    return answer

def print_with_delay(text, delay=0.001):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()  # 줄바꿈

def tiktoken_len(text):
    tokenizer = tiktoken.get_encoding("cl100k_base")
    tokens = tokenizer.encode(text)
    return len(tokens)

def main():
    st.set_page_config(page_title="DirChat", page_icon=":books:")
    st.title("_국민건강영양조사 :red[QA Chat]_")

    if "conversation" not in st.session_state:
        st.session_state.conversation = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = None
    if "processComplete" not in st.session_state:
        st.session_state.processComplete = None

    with st.sidebar:
        uploaded_files = st.file_uploader("Upload your file", type=['pdf', 'docx', 'pptx', 'csv'], accept_multiple_files=True)
        process = st.button("Process")

    if process:
        files_text = get_text(uploaded_files)
        text_chunks = get_text_chunks(files_text)
        vector_store = get_vectorstore(text_chunks)
        st.session_state.conversation = get_conversation_chain(vector_store)
        st.session_state.processComplete = True

    if 'messages' not in st.session_state:
        st.session_state['messages'] = [{"role": "assistant", "content": "안녕하세요!국건영 프로젝트 시작합니다!"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    history = StreamlitChatMessageHistory(key="chat_messages")

    if query := st.chat_input("질문을 입력해주세요."):
        st.session_state.messages.append({"role": "user", "content": query})

        with st.chat_message("user"):
            st.markdown(query)

        with st.chat_message("assistant"):
            chain = st.session_state.conversation
            with st.spinner("Thinking..."):
                result = chain({"question": query})
                response = result['answer']
                source_documents = result['source_documents']

                st.markdown(response)
                with st.expander("참고 문서 확인"):
                    for doc in source_documents:
                        st.markdown(doc.metadata['source'], help=doc.page_content)

        st.session_state.messages.append({"role": "assistant", "content": response})

def get_text(docs):
    doc_list = []
    for doc in docs:
        file_name = doc.name
        with open(file_name, "wb") as file:
            file.write(doc.getvalue())
            logger.info(f"Uploaded {file_name}")
        if '.pdf' in doc.name:
            loader = PyPDFLoader(file_name)
            documents = loader.load_and_split()
        elif '.docx' in doc.name:
            loader = Docx2txtLoader(file_name)
            documents = loader.load_and_split()
        elif '.pptx' in doc.name:
            loader = UnstructuredPowerPointLoader(file_name)
            documents = loader.load_and_split()
        elif '.csv' in doc.name:  # CSV 파일 처리 추가
            df = pd.read_csv(file_name)
            text = ' '.join(df[column].astype(str).str.cat(sep=' ') for column in df.columns)
            documents = [{'page_content': text, 'metadata': {'source': file_name}}]
        doc_list.extend(documents)
    return doc_list

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=400,
        length_function=tiktoken_len
    )
    chunks = text_splitter.split_documents(text)
    return chunks

def get_vectorstore(text_chunks):
    embeddings = HuggingFaceEmbeddings(
        model_name="jhgan/ko-sroberta-multitask",
        model_kwargs={'device': 'cuda'},
        encode_kwargs={'normalize_embeddings': True}
    )  
    vectordb = FAISS.from_documents(text_chunks, embeddings)
    return vectordb

def get_conversation_chain(vectorstore):
    llm = ChatOllama(model="llama3.1:8b", device=device)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm, 
        chain_type="stuff", 
        retriever=vectorstore.as_retriever(search_type='mmr', verbose=True), 
        memory=ConversationBufferMemory(memory_key='chat_history', return_messages=True, output_key='answer'),
        get_chat_history=lambda h: h,
        return_source_documents=True,
        verbose=True
    )
    return conversation_chain

if __name__ == '__main__':
    main()
